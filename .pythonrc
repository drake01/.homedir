# -*- mode: python -*-

from __future__ import nested_scopes
import sys, os, string, time
try:
    import readline
    import rlcompleter
    import atexit
    readline.parse_and_bind("tab: complete")
    atexit.register(readline.write_history_file,
                    os.path.expanduser('~/.python_history'))
except ImportError:
    pass

_pow = pow
from math import *
pow = _pow; del _pow

try:
    import io
    from io import StringIO, BytesIO
except ImportError:
    pass

from collections import defaultdict

import time

def timed(func):
    import functools
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        start = time.time()
        res = func(*args, **kwargs)
        end = time.time()
        print("%s time: %.5f" % (func.__name__, end - start))
        return res
    return wrapper

def reimport(mod, locals=None):
    if isinstance(mod, str):
        modname = mod
    else:
        modname = mod.__name__
    sys.modules[modname] = None
    del sys.modules[modname]
    new_mod = __import__(modname)
    if locals is not None:
        locals[modname] = new_mod
    return new_mod

try:
    import readline
except ImportError:
    print("Module readline not available.")
else:
    import rlcompleter
    readline.parse_and_bind("tab: complete")

h = [None]

class Prompt:
    def __init__(self, str='h[%d]>>>'):
        self.str = str;

    def __str__(self):
        try:
            if _ not in [h[-1], None, h]: h.append(_);
        except NameError:
           pass
        return self.str % len(h);

    def __radd__(self, other):
        return str(other) + str(self)

if os.environ.get('TERM') in [ 'xterm', 'vt100' ]:
    sys.ps1 = Prompt('\001\033[0:1;31m\002h[%d] >>> \001\033[0m\002')
else:
    sys.ps1 = Prompt()
sys.ps2 = '.......'

def timer(fn, *args):
    "Time the application of fn to args. Return (result, seconds)."
    import time
    start = time.clock()
    return fn(*args), time.clock() - start
